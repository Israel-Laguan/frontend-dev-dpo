[
  {
    "instruction": "I'm having trouble implementing responsive images in our e-commerce site. We need to deliver optimized images for various devices and screen resolutions to improve page load times and user experience. We have a component that renders product images, and I'm trying to use media queries and the `image-set` property, but it's not working as expected.",
    "files": [
      {
        "path": "src/components/ProductImage.js",
        "content": "import React from 'react';\nimport styled from 'styled-components';\n\nconst ImageContainer = styled.div`width: 100%; max-width: 600px; margin: 0 auto;`;\n\nconst ProductImage = styled.img`width: 100%; height: auto;`;\n\nconst ResponsiveImage = () => {\n  return (\n    <ImageContainer>\n      <ProductImage\n        srcSet={`small-image.jpg 600w,\n                 medium-image.jpg 1200w,\n                 large-image.jpg 2000w`}\n        sizes=\"(max-width: 600px) 600px, (max-width: 1200px) 1200px, 2000px\"\n        src=\"default-image.jpg\" // Fallback image\n        alt=\"Product Image\"\n      />\n    </ImageContainer>\n  );\n};\n\nexport default ResponsiveImage;"
      }
    ],
    "bug_type": ["Responsive Images Implementation"],
    "failure_symptoms": ["The Images do not scale correctly across different screen sizes", "High-DPI displays do not get optimized images"],
    "test": "it('renders responsive images correctly', async () => {\n  render(<ResponsiveImage />);\n  const img = await waitFor(() => screen.getByAltText('Product Image'));\n  expect(img).toHaveAttribute('srcSet', `small-image.jpg 600w, medium-image.jpg 1200w, large-image.jpg 2000w`);\n  expect(img).toHaveAttribute('sizes', `(max-width: 600px) 600px, (max-width: 1200px) 1200px, 2000px`);\n});",
    "rejected": "You can use `srcset` and `sizes` attributes on the `img` tag to specify different images for different screen sizes. Also, use `image-set` in your CSS to handle high-DPI displays.",
    "rejected_diff": "- <img src=\"default-image.jpg\" alt=\"Product Image\" style={{ content: `image-set(\n      url('image.png') 1x,\n      url('image-2x.png') 2x\n    )` }} />\n+ <img srcSet={`small-image.jpg 600w,\n                 medium-image.jpg 1200w,\n                 large-image.jpg 2000w`} sizes=\"(max-width: 600px) 600px, (max-width: 1200px) 1200px, 2000px\" src=\"default-image.jpg\" alt=\"Product Image\" />",
    "discussion": "The original implementation incorrectly combines the use of `srcset`, `sizes`, and `image-set`. `srcset` and `sizes` are meant for responsive images, while `image-set` is used for high-DPI displays in CSS. To achieve the desired functionality, we need to separate concerns and use the `<picture>` element to handle both responsive and high-DPI images.",
    "chosen": "Using the `<picture>` element with multiple `<source>` tags and a fallback `<img>` tag is the correct approach to handle both responsive and high-DPI images.",
    "chosen_diff": "+ import styled from 'styled-components';\n+\n+ const ImageContainer = styled.div`width: 100%; max-width: 600px; margin: 0 auto;`;\n+\n+ const ProductImage = styled.img`width: 100%; height: auto;`;\n+\n+ const ResponsiveImage = () => {\n+   return (\n+     <ImageContainer>\n+       <picture>\n+         {/* High-density displays */}\n+         <source\n+           media=\"(min-width: 1200px) and (min-resolution: 2x)\"\n+           srcSet=\"large-image@2x.jpg\"\n+         />\n+         <source\n+           media=\"(min-width: 601px) and (max-width: 1199px) and (min-resolution: 2x)\"\n+           srcSet=\"medium-image@2x.jpg\"\n+         />\n+         <source\n+           media=\"(max-width: 600px) and (min-resolution: 2x)\"\n+           srcSet=\"small-image@2x.jpg\"\n+         />\n+\n+         {/* Standard resolution displays */}\n+         <source media=\"(min-width: 1200px)\" srcSet=\"large-image.jpg\" />\n+         <source\n+           media=\"(min-width: 601px) and (max-width: 1199px)\"\n+           srcSet=\"medium-image.jpg\"\n+         />\n+         <source media=\"(max-width: 600px)\" srcSet=\"small-image.jpg\" />\n+\n+         {/* Fallback image */}\n+         <ProductImage src=\"default-image.jpg\" alt=\"Product Image\" />\n+       </picture>\n+     </ImageContainer>\n+   );\n+ };\n+\n+ export default ResponsiveImage;"
  }
]
